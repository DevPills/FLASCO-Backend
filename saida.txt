diff --git a/alembic/env.py b/alembic/env.py
index 0aba3b9..80ce903 100644
--- a/alembic/env.py
+++ b/alembic/env.py
@@ -48,7 +48,8 @@ async def run_migrations_online() -> None:
     """Run migrations in 'online' mode with asyncpg."""
     connectable = create_async_engine(
         settings.DATABASE_URL,
-        poolclass=pool.NullPool,
+        
+  
     )
 
     async with connectable.connect() as connection:
diff --git "a/alembic/versions/183b33457212_aplica_restri\303\247\303\243o_de_matr\303\255cula_s\303\263_para_.py" "b/alembic/versions/183b33457212_aplica_restri\303\247\303\243o_de_matr\303\255cula_s\303\263_para_.py"
new file mode 100644
index 0000000..4b4fc2c
--- /dev/null
+++ "b/alembic/versions/183b33457212_aplica_restri\303\247\303\243o_de_matr\303\255cula_s\303\263_para_.py"
@@ -0,0 +1,32 @@
+"""aplica restrição de matrícula só para alunos
+
+Revision ID: 183b33457212
+Revises: 507c4971812b
+Create Date: 2025-05-31 19:04:51.099648
+
+"""
+from typing import Sequence, Union
+
+from alembic import op
+import sqlalchemy as sa
+
+
+# revision identifiers, used by Alembic.
+revision: str = '183b33457212'
+down_revision: Union[str, None] = '507c4971812b'
+branch_labels: Union[str, Sequence[str], None] = None
+depends_on: Union[str, Sequence[str], None] = None
+
+
+def upgrade() -> None:
+    """Upgrade schema."""
+    # ### commands auto generated by Alembic - please adjust! ###
+    pass
+    # ### end Alembic commands ###
+
+
+def downgrade() -> None:
+    """Downgrade schema."""
+    # ### commands auto generated by Alembic - please adjust! ###
+    pass
+    # ### end Alembic commands ###
diff --git a/flasco/api/auth.py b/flasco/api/auth.py
index 6124470..026f9fc 100644
--- a/flasco/api/auth.py
+++ b/flasco/api/auth.py
@@ -1,10 +1,13 @@
 from http import HTTPStatus
 from fastapi import APIRouter, Depends, File, Query, Request, UploadFile
 
-from flasco.application.dtos.auth_dto import AlunoDTO, ProfessorDTO
-from flasco.dependencies import create_aluno_user_usecase, create_professor_user_usecase
-from flasco.usecases.auth.create_user_aluno import CreateUserAlunoUseCase
+from flasco.application.dtos.auth_dto import LoginDTO, ProfessorDTO
+from flasco.dependencies import (
+    create_professor_user_usecase,
+    login_usecase,
+)
 from flasco.usecases.auth.create_user_professor import CreateUserProfessorUseCase
+from flasco.usecases.auth.login import LoginUseCase
 
 router = APIRouter(prefix="/auth", tags=["Auth"])
 
@@ -18,11 +21,10 @@ async def create_usuario_professor(
     response = await create_user_usecase.execute(professor_data)
     return response
 
-@router.post("/aluno")
-async def create_usuario_professor(
-    request: Request,
-    professor_data: AlunoDTO,
-    create_user_usecase: CreateUserAlunoUseCase = Depends(create_aluno_user_usecase)
-): 
-    response = await create_user_usecase.execute(professor_data)
-    return response
\ No newline at end of file
+
+@router.post("/login")
+async def login(
+    login_data: LoginDTO,
+    usecase: LoginUseCase = Depends(login_usecase),
+):
+    return await usecase.execute(login_data)
diff --git a/flasco/application/dtos/auth_dto.py b/flasco/application/dtos/auth_dto.py
index 98f1915..ec69749 100644
--- a/flasco/application/dtos/auth_dto.py
+++ b/flasco/application/dtos/auth_dto.py
@@ -1,10 +1,11 @@
 import uuid
 from pydantic import BaseModel
 
+from flasco.application.enums.curso import Curso
 from flasco.application.enums.formacao import Formacao
-from flasco.models.aluno import CursoEnum
 
 class UserDTO(BaseModel):
+    id: uuid.UUID
     nome: str
     instituicao: str
     email: str
@@ -15,7 +16,7 @@ class ProfessorDTO(UserDTO):
 
 
 class AlunoDTO(UserDTO): 
-    curso: CursoEnum
+    curso: Curso
 
 
 class LoginDTO(BaseModel):
diff --git a/flasco/application/enums/formacao.py b/flasco/application/enums/formacao.py
index 7f2b4ab..5ec8ec5 100644
--- a/flasco/application/enums/formacao.py
+++ b/flasco/application/enums/formacao.py
@@ -1,6 +1,6 @@
 from enum import Enum
 
 class Formacao(Enum): 
-    mestre = "MESTRE"
+    mestre = "mestre"
     doutor = "doutor"
     phd = "phd"
\ No newline at end of file
diff --git a/flasco/application/utils/auth.py b/flasco/application/utils/auth.py
index 4431167..7284030 100644
--- a/flasco/application/utils/auth.py
+++ b/flasco/application/utils/auth.py
@@ -1,10 +1,25 @@
 from passlib.context import CryptContext
+from passlib.exc import UnknownHashError
 
-pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
+# Configuração simplificada do CryptContext
+pwd_context = CryptContext(
+    schemes=["bcrypt"],
+    bcrypt__default_rounds=12
+)
 
-
-def get_password_hash(password):
-    return pwd_context.hash(password)
+def get_password_hash(password: str) -> str:
+    try:
+        return pwd_context.hash(password)
+    except Exception as e:
+        print(f"Error hashing password: {e}")
+        raise
 
 def verify_password(password: str, hashed_password: str) -> bool:
-    return pwd_context.verify(password, hashed_password)
\ No newline at end of file
+    try:
+        return pwd_context.verify(password, hashed_password)
+    except UnknownHashError:
+        print("Unknown hash format")
+        return False
+    except Exception as e:
+        print(f"Error verifying password: {e}")
+        return False
\ No newline at end of file
diff --git a/flasco/database/database.py b/flasco/database/database.py
index 4b456a5..a5a06ce 100644
--- a/flasco/database/database.py
+++ b/flasco/database/database.py
@@ -3,14 +3,33 @@ from sqlalchemy.ext.asyncio import (
     async_sessionmaker,
     AsyncSession
 )
+from sqlalchemy.pool import NullPool
 from flasco.settings import settings
 
-engine = create_async_engine(settings.DATABASE_URL)
-AsyncSessionLocal = async_sessionmaker(
-    engine, class_=AsyncSession, expire_on_commit=False
+ca_path = '/home/alexandre/FLASCO-Backend/prod-ca-2021.crt'
+
+database_url = settings.DATABASE_URL.replace('postgresql+asyncpg://', 'postgresql+psycopg://')
+
+engine = create_async_engine(
+    database_url,
+    connect_args={
+        "sslmode": "verify-full",
+        "sslrootcert": ca_path
+    },
+    poolclass=NullPool,
+    echo=True
 )
 
+AsyncSessionLocal = async_sessionmaker(
+    engine,
+    class_=AsyncSession,
+    expire_on_commit=False,
+    autoflush=False
+)
 
 async def get_async_session():
     async with AsyncSessionLocal() as db:
-        yield db
+        try:
+            yield db
+        finally:
+            await db.close()
\ No newline at end of file
diff --git a/flasco/dependencies.py b/flasco/dependencies.py
index 53cc163..80b9546 100644
--- a/flasco/dependencies.py
+++ b/flasco/dependencies.py
@@ -1,11 +1,11 @@
 from fastapi import Depends
 from flasco.database.filestorage import SupabaseStorage
 from flasco.database.database import get_async_session
-from flasco.repositories.aluno_repository import AlunoRepository
-from flasco.repositories.professor_repository import ProfessorRepository
+from flasco.repositories.professor_repository import UserRepository
+from flasco.repositories.usuario_repository import UsuarioRepository
 from flasco.repositories.video_repository import VideoRepository
-from flasco.usecases.auth.create_user_aluno import CreateUserAlunoUseCase
 from flasco.usecases.auth.create_user_professor import CreateUserProfessorUseCase
+from flasco.usecases.auth.login import LoginUseCase
 from flasco.usecases.video_delete_usecase import DeleteVideoUseCase
 from flasco.usecases.video_get import GetVideoUseCase
 from flasco.usecases.video_list import VideoListUseCase
@@ -25,25 +25,26 @@ def get_video_repository(
 ):
     return VideoRepository(db_session=session)
 
-def professor_repository(
+def user_repository(
     session: AsyncSession = Depends(get_async_session),
-) -> ProfessorRepository: 
-    return  ProfessorRepository(db_session=session)
+) -> UserRepository:
+    return  UserRepository(db_session=session)
 
-def aluno_repository(
+def usuario_repository(
     session: AsyncSession = Depends(get_async_session),
-) -> AlunoRepository: 
-    return  AlunoRepository(db_session=session)
+) -> UsuarioRepository:
+    return UsuarioRepository(db_session=session)
 
 def create_professor_user_usecase(
-    professor_repository: ProfessorRepository = Depends(professor_repository),
+    user_repository: UserRepository = Depends(user_repository),
 ) -> CreateUserProfessorUseCase:
-    return CreateUserProfessorUseCase(professor_repository=professor_repository)
+    return CreateUserProfessorUseCase(user_repository=user_repository)
 
-def create_aluno_user_usecase(
-    aluno_repository: AlunoRepository = Depends(aluno_repository),
-) -> CreateUserAlunoUseCase:
-    return CreateUserAlunoUseCase(aluno_repository=aluno_repository)
+
+def login_usecase(
+    user_repository: UsuarioRepository = Depends(usuario_repository),
+) -> LoginUseCase:
+    return LoginUseCase(user_repository=user_repository)
 
 
 def video_upload_usecase(
diff --git a/flasco/infra/middleware/verification_token_middleware.py b/flasco/infra/middleware/verification_token_middleware.py
index 6ea6c7e..8f264f7 100644
--- a/flasco/infra/middleware/verification_token_middleware.py
+++ b/flasco/infra/middleware/verification_token_middleware.py
@@ -20,7 +20,7 @@ def verification_token(func):
         try:
             payload = jwt.decode(
                 token,
-                settings.SECRET,
+                settings.SECRET_KEY,
                 algorithms=["HS256"]
             )
         except jwt.ExpiredSignatureError:
diff --git a/flasco/main.py b/flasco/main.py
index 3159509..cbcbf35 100644
--- a/flasco/main.py
+++ b/flasco/main.py
@@ -6,7 +6,7 @@ from fastapi.middleware.cors import CORSMiddleware
 app = FastAPI()
 
 app.include_router(video_router)
-app.include_router(auth_router) 
+app.include_router(auth_router)
 
 origins = [
     "http://localhost:3000/",
diff --git a/flasco/models/aluno.py b/flasco/models/aluno.py
index 0fce3df..8c822e4 100644
--- a/flasco/models/aluno.py
+++ b/flasco/models/aluno.py
@@ -8,15 +8,15 @@ from flasco.models.se_matricula import SeMatricula
 
 
 class CursoEnum(enum.Enum):
-    TECNICO_DE_INFORMATICA = "TECNICO_DE_INFORMATICA"
-    ENGENHARIA_DE_SOFTWARE = "ENGENHARIA_DE_SOFTWARE"
-    ENGENHARIA_DE_COMPUTACAO = "ENGENHARIA_DE_COMPUTACAO"
-    SISTEMAS_DE_INFORMACAO = "SISTEMAS_DE_INFORMACAO"
+    TECNICO_DE_INFORMATICA = "Técnico de Informática"
+    ENGENHARIA_DE_SOFTWARE = "Engenharia de Software"
+    ENGENHARIA_DE_COMPUTACAO = "Engenharia de Computação"
+    SISTEMAS_DE_INFORMACAO = "Sistemas de Informação"
     ANALISE_DESENVOLVIMENTO_DE_SISTEMAS = (
-        "ANALISE_DESENVOLVIMENTO_DE_SISTEMAS"
+        "Análise e Desenvolvimento de Sistemas"
     )
-    ENGENHARIA_DE_INFORMACAO = "ENGENHARIA_DE_INFORMACAO"
-    CIENCIA_DA_COMPUTACAO = "CIENCIA_DA_COMPUTACAO"
+    ENGENHARIA_DE_INFORMACAO = "Engenharia de Informação"
+    CIENCIA_DA_COMPUTACAO = "Ciência da Computação"
 
 
 class Aluno(Base):
@@ -39,4 +39,4 @@ class Aluno(Base):
     modulos_matriculados: Mapped[list["SeMatricula"]] = relationship(
         back_populates="aluno",
         cascade="all, delete-orphan",
-    )
\ No newline at end of file
+    )
diff --git a/flasco/models/professor.py b/flasco/models/professor.py
index 6acb109..6cc8e9b 100644
--- a/flasco/models/professor.py
+++ b/flasco/models/professor.py
@@ -4,6 +4,7 @@ from uuid import UUID
 from sqlalchemy import Enum, ForeignKey
 from sqlalchemy.orm import mapped_column, Mapped, relationship
 from flasco.models.base import Base
+
 if TYPE_CHECKING:
     from flasco.models.modulo import Modulo
     from flasco.models.usuario import Usuario
diff --git a/flasco/repositories/aluno_repository.py b/flasco/repositories/aluno_repository.py
deleted file mode 100644
index c559b10..0000000
--- a/flasco/repositories/aluno_repository.py
+++ /dev/null
@@ -1,63 +0,0 @@
-
-
-from typing import Optional
-import uuid
-
-from sqlalchemy.ext.asyncio import AsyncSession
-
-from sqlalchemy import String, inspect, select
-from flasco.application.dtos.auth_dto import AlunoDTO
-from flasco.application.enums.curso import Curso
-from flasco.models.aluno import Aluno, CursoEnum
-from flasco.models.professor import FormacaoEnum
-from flasco.models.usuario import Usuario
-from flasco.repositories.base_repository import BaseRepository
-
-
-class AlunoRepository(BaseRepository):
-    def __init__(self, db_session: AsyncSession):
-        super().__init__(db_session, Aluno)
-    
-    async def get_aluno_by_email(self, email: str) -> Usuario:
-        query = select(Usuario).where(Usuario.email == email)
-        result = await self.db_session.execute(query)
-        return result.scalars().first()
-
-    async def get_user_by_id(self, id_usuario: uuid.UUID) -> Optional[Usuario]:
-        query = select(Usuario).where(Usuario.id_usuario == id_usuario)
-        result = await self.db_session.execute(query)
-        return result.scalars().first()
-
-    async def upsert_user(self, dto: AlunoDTO) -> Usuario:
-
-        usuario = Usuario(
-            nome=dto.nome,
-            email=dto.email,
-            instituicao=dto.instituicao,
-            senha=dto.password
-        )
-
-        self.db_session.add(usuario)
-        await self.db_session.flush()
-        return usuario
-
-    async def create(self, dto: AlunoDTO) -> Aluno:
-        usuario = await self.upsert_user(dto)
-
-        curso_enum = (
-            CursoEnum[dto.curso.name.upper()]
-            if hasattr(dto.curso, "name")
-            else CursoEnum[dto.curso.upper()]
-            if dto.curso
-            else None
-        )
-
-        aluno = Aluno(
-            id_usuario=usuario.id_usuario,
-            curso=curso_enum,
-        )
-        self.db_session.add(aluno)
-
-        await self.db_session.commit()
-        await self.db_session.refresh(aluno)
-        return aluno
\ No newline at end of file
diff --git a/flasco/repositories/base_repository.py b/flasco/repositories/base_repository.py
index 2adf8c3..c00e1eb 100644
--- a/flasco/repositories/base_repository.py
+++ b/flasco/repositories/base_repository.py
@@ -10,37 +10,37 @@ class BaseRepository:
         self.db_session = db_session
         self.model = model
 
-    async def create(self, item: T) -> T:
-        db_item_data = self.model(**item.model_dump())
-        self.db_session.add(db_item_data)
-        await self.db_session.commit()
-        await self.de_session.refresh(db_item_data)
+        async def create(self, item: T) -> T:
+            db_item_data = self.model(**item.model_dump())
+            self.db_session.add(db_item_data)
+            await self.db_session.commit()
+            await self.de_session.refresh(db_item_data)
 
-        return db_item_data
-    
-    async def list(self) -> T:
-        stmt = select(self.model)
-        return await self.db_session.execute(stmt)
-    
-    async def get_by_id(self, item_id: str) -> T:
-        stmt = select(self.model).where(self.model.id == int(item_id))
-        result = await self.db_session.execute(stmt)
-        return result.scalars().first()
-    
-    async def update(self, item_id: str, update_item_data: T) -> T:
-        stmt = (
-            update(self.model)
-            .where(self.model.id == int(item_id))
-            .values(**update_item_data.model_dump())
-        )
-        await self.db_session.execute(stmt)
-        await self.db_session.commit()
+            return db_item_data
+        
+        async def list(self) -> T:
+            stmt = select(self.model)
+            return await self.db_session.execute(stmt)
+        
+        async def get_by_id(self, item_id: str) -> T:
+            stmt = select(self.model).where(self.model.id == int(item_id))
+            result = await self.db_session.execute(stmt)
+            return result.scalars().first()
+        
+        async def update(self, item_id: str, update_item_data: T) -> T:
+            stmt = (
+                update(self.model)
+                .where(self.model.id == int(item_id))
+                .values(**update_item_data.model_dump())
+            )
+            await self.db_session.execute(stmt)
+            await self.db_session.commit()
 
-        result = await self.get_by_id(item_id)
-        return result
-    
-    async def delete(self, item_id: str):
-        stmt = delete(self.model).where(self.model.id == int(item_id))
+            result = await self.get_by_id(item_id)
+            return result
+        
+        async def delete(self, item_id: str):
+            stmt = delete(self.model).where(self.model.id == int(item_id))
 
-        await self.db_session.execute(stmt)
-        await self.db_session.commit()
\ No newline at end of file
+            await self.db_session.execute(stmt)
+            await self.db_session.commit()
\ No newline at end of file
diff --git a/flasco/repositories/professor_repository.py b/flasco/repositories/professor_repository.py
index ce541d4..cd37e10 100644
--- a/flasco/repositories/professor_repository.py
+++ b/flasco/repositories/professor_repository.py
@@ -1,61 +1,23 @@
 import uuid
-from typing import Optional
-
 from sqlalchemy import select
+from sqlalchemy import insert, select
 from sqlalchemy.ext.asyncio import AsyncSession
-from sqlalchemy.inspection import inspect
+from typing import TypeVar
+
 
-from flasco.models.professor import Professor, FormacaoEnum
-from flasco.models.usuario import Usuario
+from flasco.models.professor import Professor
 from flasco.repositories.base_repository import BaseRepository
-from flasco.application.dtos.auth_dto import ProfessorDTO
 
 
-class ProfessorRepository(BaseRepository):
+T = TypeVar("T")
+
+
+class UserRepository(BaseRepository): 
     def __init__(self, db_session: AsyncSession):
         super().__init__(db_session, Professor)
 
-    async def get_professor_by_email(self, email: str) -> Usuario:
-        query = select(Usuario).where(Usuario.email == email)
-        result = await self.db_session.execute(query)
-        return result.scalars().first()
-
-    async def get_user_by_id(self, id_usuario: uuid.UUID) -> Optional[Usuario]:
-        query = select(Usuario).where(Usuario.id_usuario == id_usuario)
+    async def get_professor_by_id(self, id: uuid) -> Professor:
+        query = select(Professor).where(Professor.id_usuario == id)
         result = await self.db_session.execute(query)
         return result.scalars().first()
-
-    async def upsert_user(self, dto: ProfessorDTO) -> Usuario:
-
-
-        usuario = Usuario(
-            nome=dto.nome,
-            email=dto.email,
-            instituicao=dto.instituicao,
-            senha=dto.password
-        )
-        
-        self.db_session.add(usuario)
-        await self.db_session.flush()
-        return usuario
-
-    async def create(self, dto: ProfessorDTO) -> Professor:
-        usuario = await self.upsert_user(dto)
-
-        formacao_enum = (
-            FormacaoEnum[dto.formacao.name.upper()]
-            if hasattr(dto.formacao, "name")
-            else FormacaoEnum[dto.formacao.upper()]
-            if dto.formacao
-            else None
-        )
-
-        professor = Professor(
-            id_usuario=usuario.id_usuario,
-            formacao=formacao_enum,
-        )
-        self.db_session.add(professor)
-
-        await self.db_session.commit()
-        await self.db_session.refresh(professor)
-        return professor
\ No newline at end of file
+    
diff --git a/flasco/repositories/usuario_repository.py b/flasco/repositories/usuario_repository.py
new file mode 100644
index 0000000..a3f1bb3
--- /dev/null
+++ b/flasco/repositories/usuario_repository.py
@@ -0,0 +1,20 @@
+from sqlalchemy import select
+from sqlalchemy.ext.asyncio import AsyncSession
+
+from flasco.models.usuario import Usuario
+
+
+class UsuarioRepository:
+    def __init__(self, db_session: AsyncSession):
+        self.db_session = db_session
+
+    async def get_by_email(self, email: str) -> Usuario | None:
+        print(f"Searching for user with email: {email}")
+        query = select(Usuario).where(Usuario.email == email)
+        result = await self.db_session.execute(query)
+        user = result.scalars().first()
+        if user:
+            print(f"Found user: {user.email}, hash: {user.senha[:20]}...")
+        else:
+            print("No user found")
+        return user
diff --git a/flasco/usecases/auth/create_user_aluno.py b/flasco/usecases/auth/create_user_aluno.py
deleted file mode 100644
index f9cd3c5..0000000
--- a/flasco/usecases/auth/create_user_aluno.py
+++ /dev/null
@@ -1,35 +0,0 @@
-from fastapi import HTTPException
-from flasco.application.dtos.auth_dto import AlunoDTO
-from flasco.application.utils.auth import get_password_hash
-from flasco.infra.services.jwt_token_service import create_access_token
-from flasco.repositories.aluno_repository import AlunoRepository
-
-
-class CreateUserAlunoUseCase: 
-    def __init__(self, aluno_repository: AlunoRepository):
-        self.aluno_repository = aluno_repository
-
-    async def execute(self, user: AlunoDTO) -> None:
-        aluno_user_registered = await self.aluno_repository.get_aluno_by_email(
-            user.email
-        )
-
-        if aluno_user_registered:
-            raise HTTPException(
-                status_code=400,
-                detail="Usuario ja cadastrado"
-            )
-        user.password = get_password_hash(user.password)
-        try:
-            aluno = await self.aluno_repository.create(user)
-        except Exception as ex:
-            raise HTTPException(
-                status_code=400,
-                detail=f"Não foi possível criar o usuário: {str(ex)}"
-            )
-        access_token = create_access_token(data={"sub": str(aluno.id_usuario)})
-        return {
-            "status": "sucesso",
-            "mensagem": "Usuário criado com sucesso",
-            "access_token": access_token
-        }
\ No newline at end of file
diff --git a/flasco/usecases/auth/create_user_professor.py b/flasco/usecases/auth/create_user_professor.py
index ea2c948..d8ac219 100644
--- a/flasco/usecases/auth/create_user_professor.py
+++ b/flasco/usecases/auth/create_user_professor.py
@@ -1,21 +1,19 @@
-# flasco/usecases/auth/create_user_professor.py
-
 from fastapi import HTTPException
 from flasco.application.dtos.auth_dto import ProfessorDTO
 from flasco.application.utils.auth import get_password_hash
 from flasco.infra.services.jwt_token_service import create_access_token
-from flasco.repositories.professor_repository import ProfessorRepository
+from flasco.repositories.professor_repository import UserRepository
 from passlib.context import CryptContext
 
 pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
 
-class CreateUserProfessorUseCase:
-    def __init__(self, professor_repository: ProfessorRepository):
-        self.professor_repository = professor_repository
+class CreateUserProfessorUseCase: 
+    def __init__(self, userRepository: UserRepository):
+        self.userRepository = userRepository
 
     async def execute(self, user: ProfessorDTO) -> None:
-        professor_user_registered = await self.professor_repository.get_professor_by_email(
-            user.email
+        professor_user_registered = await self.userRepository.get_professor_by_id(
+            user.id
         )
 
         if professor_user_registered:
@@ -25,15 +23,15 @@ class CreateUserProfessorUseCase:
             )
         user.password = get_password_hash(user.password)
         try:
-            professor = await self.professor_repository.create(user)
-        except Exception as ex:
+            await self.userRepository.create(user)
+        except Exception as ex: 
             raise HTTPException(
                 status_code=400,
                 detail=f"Não foi possível criar o usuário: {str(ex)}"
             )
-        access_token = create_access_token(data={"sub": str(professor.id_usuario)})
+        access_token =  create_access_token(data={})
         return {
             "status": "sucesso",
             "mensagem": "Usuário criado com sucesso",
             "access_token": access_token
-        }
\ No newline at end of file
+        }
diff --git a/flasco/usecases/auth/login.py b/flasco/usecases/auth/login.py
index 52fdf60..7586eac 100644
--- a/flasco/usecases/auth/login.py
+++ b/flasco/usecases/auth/login.py
@@ -1,4 +1,36 @@
 from fastapi import HTTPException, status
+
 from flasco.application.dtos.auth_dto import LoginDTO
 from flasco.application.utils.auth import verify_password
-from flasco.infra
\ No newline at end of file
+from flasco.infra.services.jwt_token_service import create_access_token
+from flasco.repositories.usuario_repository import UsuarioRepository
+
+
+class LoginUseCase:
+    def __init__(self, user_repository: UsuarioRepository):
+        self.user_repository = user_repository
+
+    async def execute(self, login_data: LoginDTO):
+        print(f"Attempting login for email: {login_data.email}")
+        user = await self.user_repository.get_by_email(login_data.email)
+        
+        if not user:
+            print(f"User not found for email: {login_data.email}")
+            raise HTTPException(
+                status_code=status.HTTP_401_UNAUTHORIZED,
+                detail="Email ou senha inválidos",
+            )
+
+        print(f"User found: {user.email}, verifying password...")
+        if not verify_password(login_data.password, user.senha):
+            print(f"Invalid password for user: {user.email}")
+            raise HTTPException(
+                status_code=status.HTTP_401_UNAUTHORIZED,
+                detail="Email ou senha inválidos",
+            )
+
+        print(f"Password verified successfully for user: {user.email}")
+        access_token = create_access_token(
+            {"user_id": str(user.id_usuario), "email": user.email}
+        )
+        return {"access_token": access_token, "token_type": "bearer"}
diff --git a/poetry.lock b/poetry.lock
index 1e39e9b..adcb8c9 100644
--- a/poetry.lock
+++ b/poetry.lock
@@ -1,4 +1,4 @@
-# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.
+# This file is automatically @generated by Poetry 2.1.2 and should not be changed by hand.
 
 [[package]]
 name = "aiohappyeyeballs"
@@ -270,63 +270,33 @@ tests-mypy = ["mypy (>=1.11.1) ; platform_python_implementation == \"CPython\" a
 
 [[package]]
 name = "bcrypt"
-version = "4.3.0"
+version = "4.0.1"
 description = "Modern password hashing for your software and your servers"
 optional = false
-python-versions = ">=3.8"
+python-versions = ">=3.6"
 groups = ["main"]
 files = [
-    {file = "bcrypt-4.3.0-cp313-cp313t-macosx_10_12_universal2.whl", hash = "sha256:f01e060f14b6b57bbb72fc5b4a83ac21c443c9a2ee708e04a10e9192f90a6281"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:c5eeac541cefd0bb887a371ef73c62c3cd78535e4887b310626036a7c0a817bb"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:59e1aa0e2cd871b08ca146ed08445038f42ff75968c7ae50d2fdd7860ade2180"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-manylinux_2_28_aarch64.whl", hash = "sha256:0042b2e342e9ae3d2ed22727c1262f76cc4f345683b5c1715f0250cf4277294f"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:74a8d21a09f5e025a9a23e7c0fd2c7fe8e7503e4d356c0a2c1486ba010619f09"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-manylinux_2_28_x86_64.whl", hash = "sha256:0142b2cb84a009f8452c8c5a33ace5e3dfec4159e7735f5afe9a4d50a8ea722d"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-manylinux_2_34_aarch64.whl", hash = "sha256:12fa6ce40cde3f0b899729dbd7d5e8811cb892d31b6f7d0334a1f37748b789fd"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-manylinux_2_34_x86_64.whl", hash = "sha256:5bd3cca1f2aa5dbcf39e2aa13dd094ea181f48959e1071265de49cc2b82525af"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-musllinux_1_1_aarch64.whl", hash = "sha256:335a420cfd63fc5bc27308e929bee231c15c85cc4c496610ffb17923abf7f231"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-musllinux_1_1_x86_64.whl", hash = "sha256:0e30e5e67aed0187a1764911af023043b4542e70a7461ad20e837e94d23e1d6c"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:3b8d62290ebefd49ee0b3ce7500f5dbdcf13b81402c05f6dafab9a1e1b27212f"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:2ef6630e0ec01376f59a006dc72918b1bf436c3b571b80fa1968d775fa02fe7d"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-win32.whl", hash = "sha256:7a4be4cbf241afee43f1c3969b9103a41b40bcb3a3f467ab19f891d9bc4642e4"},
-    {file = "bcrypt-4.3.0-cp313-cp313t-win_amd64.whl", hash = "sha256:5c1949bf259a388863ced887c7861da1df681cb2388645766c89fdfd9004c669"},
-    {file = "bcrypt-4.3.0-cp38-abi3-macosx_10_12_universal2.whl", hash = "sha256:f81b0ed2639568bf14749112298f9e4e2b28853dab50a8b357e31798686a036d"},
-    {file = "bcrypt-4.3.0-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:864f8f19adbe13b7de11ba15d85d4a428c7e2f344bac110f667676a0ff84924b"},
-    {file = "bcrypt-4.3.0-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3e36506d001e93bffe59754397572f21bb5dc7c83f54454c990c74a468cd589e"},
-    {file = "bcrypt-4.3.0-cp38-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:842d08d75d9fe9fb94b18b071090220697f9f184d4547179b60734846461ed59"},
-    {file = "bcrypt-4.3.0-cp38-abi3-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:7c03296b85cb87db865d91da79bf63d5609284fc0cab9472fdd8367bbd830753"},
-    {file = "bcrypt-4.3.0-cp38-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:62f26585e8b219cdc909b6a0069efc5e4267e25d4a3770a364ac58024f62a761"},
-    {file = "bcrypt-4.3.0-cp38-abi3-manylinux_2_34_aarch64.whl", hash = "sha256:beeefe437218a65322fbd0069eb437e7c98137e08f22c4660ac2dc795c31f8bb"},
-    {file = "bcrypt-4.3.0-cp38-abi3-manylinux_2_34_x86_64.whl", hash = "sha256:97eea7408db3a5bcce4a55d13245ab3fa566e23b4c67cd227062bb49e26c585d"},
-    {file = "bcrypt-4.3.0-cp38-abi3-musllinux_1_1_aarch64.whl", hash = "sha256:191354ebfe305e84f344c5964c7cd5f924a3bfc5d405c75ad07f232b6dffb49f"},
-    {file = "bcrypt-4.3.0-cp38-abi3-musllinux_1_1_x86_64.whl", hash = "sha256:41261d64150858eeb5ff43c753c4b216991e0ae16614a308a15d909503617732"},
-    {file = "bcrypt-4.3.0-cp38-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:33752b1ba962ee793fa2b6321404bf20011fe45b9afd2a842139de3011898fef"},
-    {file = "bcrypt-4.3.0-cp38-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:50e6e80a4bfd23a25f5c05b90167c19030cf9f87930f7cb2eacb99f45d1c3304"},
-    {file = "bcrypt-4.3.0-cp38-abi3-win32.whl", hash = "sha256:67a561c4d9fb9465ec866177e7aebcad08fe23aaf6fbd692a6fab69088abfc51"},
-    {file = "bcrypt-4.3.0-cp38-abi3-win_amd64.whl", hash = "sha256:584027857bc2843772114717a7490a37f68da563b3620f78a849bcb54dc11e62"},
-    {file = "bcrypt-4.3.0-cp39-abi3-macosx_10_12_universal2.whl", hash = "sha256:0d3efb1157edebfd9128e4e46e2ac1a64e0c1fe46fb023158a407c7892b0f8c3"},
-    {file = "bcrypt-4.3.0-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:08bacc884fd302b611226c01014eca277d48f0a05187666bca23aac0dad6fe24"},
-    {file = "bcrypt-4.3.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f6746e6fec103fcd509b96bacdfdaa2fbde9a553245dbada284435173a6f1aef"},
-    {file = "bcrypt-4.3.0-cp39-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:afe327968aaf13fc143a56a3360cb27d4ad0345e34da12c7290f1b00b8fe9a8b"},
-    {file = "bcrypt-4.3.0-cp39-abi3-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:d9af79d322e735b1fc33404b5765108ae0ff232d4b54666d46730f8ac1a43676"},
-    {file = "bcrypt-4.3.0-cp39-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:f1e3ffa1365e8702dc48c8b360fef8d7afeca482809c5e45e653af82ccd088c1"},
-    {file = "bcrypt-4.3.0-cp39-abi3-manylinux_2_34_aarch64.whl", hash = "sha256:3004df1b323d10021fda07a813fd33e0fd57bef0e9a480bb143877f6cba996fe"},
-    {file = "bcrypt-4.3.0-cp39-abi3-manylinux_2_34_x86_64.whl", hash = "sha256:531457e5c839d8caea9b589a1bcfe3756b0547d7814e9ce3d437f17da75c32b0"},
-    {file = "bcrypt-4.3.0-cp39-abi3-musllinux_1_1_aarch64.whl", hash = "sha256:17a854d9a7a476a89dcef6c8bd119ad23e0f82557afbd2c442777a16408e614f"},
-    {file = "bcrypt-4.3.0-cp39-abi3-musllinux_1_1_x86_64.whl", hash = "sha256:6fb1fd3ab08c0cbc6826a2e0447610c6f09e983a281b919ed721ad32236b8b23"},
-    {file = "bcrypt-4.3.0-cp39-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:e965a9c1e9a393b8005031ff52583cedc15b7884fce7deb8b0346388837d6cfe"},
-    {file = "bcrypt-4.3.0-cp39-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:79e70b8342a33b52b55d93b3a59223a844962bef479f6a0ea318ebbcadf71505"},
-    {file = "bcrypt-4.3.0-cp39-abi3-win32.whl", hash = "sha256:b4d4e57f0a63fd0b358eb765063ff661328f69a04494427265950c71b992a39a"},
-    {file = "bcrypt-4.3.0-cp39-abi3-win_amd64.whl", hash = "sha256:e53e074b120f2877a35cc6c736b8eb161377caae8925c17688bd46ba56daaa5b"},
-    {file = "bcrypt-4.3.0-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl", hash = "sha256:c950d682f0952bafcceaf709761da0a32a942272fad381081b51096ffa46cea1"},
-    {file = "bcrypt-4.3.0-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:107d53b5c67e0bbc3f03ebf5b030e0403d24dda980f8e244795335ba7b4a027d"},
-    {file = "bcrypt-4.3.0-pp310-pypy310_pp73-manylinux_2_34_aarch64.whl", hash = "sha256:b693dbb82b3c27a1604a3dff5bfc5418a7e6a781bb795288141e5f80cf3a3492"},
-    {file = "bcrypt-4.3.0-pp310-pypy310_pp73-manylinux_2_34_x86_64.whl", hash = "sha256:b6354d3760fcd31994a14c89659dee887f1351a06e5dac3c1142307172a79f90"},
-    {file = "bcrypt-4.3.0-pp311-pypy311_pp73-manylinux_2_28_aarch64.whl", hash = "sha256:a839320bf27d474e52ef8cb16449bb2ce0ba03ca9f44daba6d93fa1d8828e48a"},
-    {file = "bcrypt-4.3.0-pp311-pypy311_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:bdc6a24e754a555d7316fa4774e64c6c3997d27ed2d1964d55920c7c227bc4ce"},
-    {file = "bcrypt-4.3.0-pp311-pypy311_pp73-manylinux_2_34_aarch64.whl", hash = "sha256:55a935b8e9a1d2def0626c4269db3fcd26728cbff1e84f0341465c31c4ee56d8"},
-    {file = "bcrypt-4.3.0-pp311-pypy311_pp73-manylinux_2_34_x86_64.whl", hash = "sha256:57967b7a28d855313a963aaea51bf6df89f833db4320da458e5b3c5ab6d4c938"},
-    {file = "bcrypt-4.3.0.tar.gz", hash = "sha256:3a3fd2204178b6d2adcf09cb4f6426ffef54762577a7c9b54c159008cb288c18"},
+    {file = "bcrypt-4.0.1-cp36-abi3-macosx_10_10_universal2.whl", hash = "sha256:b1023030aec778185a6c16cf70f359cbb6e0c289fd564a7cfa29e727a1c38f8f"},
+    {file = "bcrypt-4.0.1-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_24_aarch64.whl", hash = "sha256:08d2947c490093a11416df18043c27abe3921558d2c03e2076ccb28a116cb6d0"},
+    {file = "bcrypt-4.0.1-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0eaa47d4661c326bfc9d08d16debbc4edf78778e6aaba29c1bc7ce67214d4410"},
+    {file = "bcrypt-4.0.1-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:ae88eca3024bb34bb3430f964beab71226e761f51b912de5133470b649d82344"},
+    {file = "bcrypt-4.0.1-cp36-abi3-manylinux_2_24_x86_64.whl", hash = "sha256:a522427293d77e1c29e303fc282e2d71864579527a04ddcfda6d4f8396c6c36a"},
+    {file = "bcrypt-4.0.1-cp36-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:fbdaec13c5105f0c4e5c52614d04f0bca5f5af007910daa8b6b12095edaa67b3"},
+    {file = "bcrypt-4.0.1-cp36-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:ca3204d00d3cb2dfed07f2d74a25f12fc12f73e606fcaa6975d1f7ae69cacbb2"},
+    {file = "bcrypt-4.0.1-cp36-abi3-musllinux_1_1_aarch64.whl", hash = "sha256:089098effa1bc35dc055366740a067a2fc76987e8ec75349eb9484061c54f535"},
+    {file = "bcrypt-4.0.1-cp36-abi3-musllinux_1_1_x86_64.whl", hash = "sha256:e9a51bbfe7e9802b5f3508687758b564069ba937748ad7b9e890086290d2f79e"},
+    {file = "bcrypt-4.0.1-cp36-abi3-win32.whl", hash = "sha256:2caffdae059e06ac23fce178d31b4a702f2a3264c20bfb5ff541b338194d8fab"},
+    {file = "bcrypt-4.0.1-cp36-abi3-win_amd64.whl", hash = "sha256:8a68f4341daf7522fe8d73874de8906f3a339048ba406be6ddc1b3ccb16fc0d9"},
+    {file = "bcrypt-4.0.1-pp37-pypy37_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bf4fa8b2ca74381bb5442c089350f09a3f17797829d958fad058d6e44d9eb83c"},
+    {file = "bcrypt-4.0.1-pp37-pypy37_pp73-manylinux_2_24_x86_64.whl", hash = "sha256:67a97e1c405b24f19d08890e7ae0c4f7ce1e56a712a016746c8b2d7732d65d4b"},
+    {file = "bcrypt-4.0.1-pp37-pypy37_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:b3b85202d95dd568efcb35b53936c5e3b3600c7cdcc6115ba461df3a8e89f38d"},
+    {file = "bcrypt-4.0.1-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:cbb03eec97496166b704ed663a53680ab57c5084b2fc98ef23291987b525cb7d"},
+    {file = "bcrypt-4.0.1-pp38-pypy38_pp73-manylinux_2_24_x86_64.whl", hash = "sha256:5ad4d32a28b80c5fa6671ccfb43676e8c1cc232887759d1cd7b6f56ea4355215"},
+    {file = "bcrypt-4.0.1-pp38-pypy38_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:b57adba8a1444faf784394de3436233728a1ecaeb6e07e8c22c8848f179b893c"},
+    {file = "bcrypt-4.0.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:705b2cea8a9ed3d55b4491887ceadb0106acf7c6387699fca771af56b1cdeeda"},
+    {file = "bcrypt-4.0.1-pp39-pypy39_pp73-manylinux_2_24_x86_64.whl", hash = "sha256:2b3ac11cf45161628f1f3733263e63194f22664bf4d0c0f3ab34099c02134665"},
+    {file = "bcrypt-4.0.1-pp39-pypy39_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:3100851841186c25f127731b9fa11909ab7b1df6fc4b9f8353f4f1fd952fbf71"},
+    {file = "bcrypt-4.0.1.tar.gz", hash = "sha256:27d375903ac8261cfe4047f6709d16f7d18d39b1ec92aaf72af989552a650ebd"},
 ]
 
 [package.extras]
@@ -1327,6 +1297,107 @@ files = [
     {file = "propcache-0.3.1.tar.gz", hash = "sha256:40d980c33765359098837527e18eddefc9a24cea5b45e078a7f3bb5b032c6ecf"},
 ]
 
+[[package]]
+name = "psycopg"
+version = "3.2.9"
+description = "PostgreSQL database adapter for Python"
+optional = false
+python-versions = ">=3.8"
+groups = ["main"]
+files = [
+    {file = "psycopg-3.2.9-py3-none-any.whl", hash = "sha256:01a8dadccdaac2123c916208c96e06631641c0566b22005493f09663c7a8d3b6"},
+    {file = "psycopg-3.2.9.tar.gz", hash = "sha256:2fbb46fcd17bc81f993f28c47f1ebea38d66ae97cc2dbc3cad73b37cefbff700"},
+]
+
+[package.dependencies]
+psycopg-binary = {version = "3.2.9", optional = true, markers = "implementation_name != \"pypy\" and extra == \"binary\""}
+typing-extensions = {version = ">=4.6", markers = "python_version < \"3.13\""}
+tzdata = {version = "*", markers = "sys_platform == \"win32\""}
+
+[package.extras]
+binary = ["psycopg-binary (==3.2.9) ; implementation_name != \"pypy\""]
+c = ["psycopg-c (==3.2.9) ; implementation_name != \"pypy\""]
+dev = ["ast-comments (>=1.1.2)", "black (>=24.1.0)", "codespell (>=2.2)", "dnspython (>=2.1)", "flake8 (>=4.0)", "isort-psycopg", "isort[colors] (>=6.0)", "mypy (>=1.14)", "pre-commit (>=4.0.1)", "types-setuptools (>=57.4)", "types-shapely (>=2.0)", "wheel (>=0.37)"]
+docs = ["Sphinx (>=5.0)", "furo (==2022.6.21)", "sphinx-autobuild (>=2021.3.14)", "sphinx-autodoc-typehints (>=1.12)"]
+pool = ["psycopg-pool"]
+test = ["anyio (>=4.0)", "mypy (>=1.14)", "pproxy (>=2.7)", "pytest (>=6.2.5)", "pytest-cov (>=3.0)", "pytest-randomly (>=3.5)"]
+
+[[package]]
+name = "psycopg-binary"
+version = "3.2.9"
+description = "PostgreSQL database adapter for Python -- C optimisation distribution"
+optional = false
+python-versions = ">=3.8"
+groups = ["main"]
+markers = "implementation_name != \"pypy\""
+files = [
+    {file = "psycopg_binary-3.2.9-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:528239bbf55728ba0eacbd20632342867590273a9bacedac7538ebff890f1093"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:e4978c01ca4c208c9d6376bd585e2c0771986b76ff7ea518f6d2b51faece75e8"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1ed2bab85b505d13e66a914d0f8cdfa9475c16d3491cf81394e0748b77729af2"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:799fa1179ab8a58d1557a95df28b492874c8f4135101b55133ec9c55fc9ae9d7"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:bb37ac3955d19e4996c3534abfa4f23181333974963826db9e0f00731274b695"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:001e986656f7e06c273dd4104e27f4b4e0614092e544d950c7c938d822b1a894"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:fa5c80d8b4cbf23f338db88a7251cef8bb4b68e0f91cf8b6ddfa93884fdbb0c1"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:39a127e0cf9b55bd4734a8008adf3e01d1fd1cb36339c6a9e2b2cbb6007c50ee"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:fb7599e436b586e265bea956751453ad32eb98be6a6e694252f4691c31b16edb"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:5d2c9fe14fe42b3575a0b4e09b081713e83b762c8dc38a3771dd3265f8f110e7"},
+    {file = "psycopg_binary-3.2.9-cp310-cp310-win_amd64.whl", hash = "sha256:7e4660fad2807612bb200de7262c88773c3483e85d981324b3c647176e41fdc8"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:2504e9fd94eabe545d20cddcc2ff0da86ee55d76329e1ab92ecfcc6c0a8156c4"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:093a0c079dd6228a7f3c3d82b906b41964eaa062a9a8c19f45ab4984bf4e872b"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:387c87b51d72442708e7a853e7e7642717e704d59571da2f3b29e748be58c78a"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d9ac10a2ebe93a102a326415b330fff7512f01a9401406896e78a81d75d6eddc"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:72fdbda5b4c2a6a72320857ef503a6589f56d46821592d4377c8c8604810342b"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f34e88940833d46108f949fdc1fcfb74d6b5ae076550cd67ab59ef47555dba95"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:a3e0f89fe35cb03ff1646ab663dabf496477bab2a072315192dbaa6928862891"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:6afb3e62f2a3456f2180a4eef6b03177788df7ce938036ff7f09b696d418d186"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:cc19ed5c7afca3f6b298bfc35a6baa27adb2019670d15c32d0bb8f780f7d560d"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:bc75f63653ce4ec764c8f8c8b0ad9423e23021e1c34a84eb5f4ecac8538a4a4a"},
+    {file = "psycopg_binary-3.2.9-cp311-cp311-win_amd64.whl", hash = "sha256:3db3ba3c470801e94836ad78bf11fd5fab22e71b0c77343a1ee95d693879937a"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:be7d650a434921a6b1ebe3fff324dbc2364393eb29d7672e638ce3e21076974e"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:6a76b4722a529390683c0304501f238b365a46b1e5fb6b7249dbc0ad6fea51a0"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:96a551e4683f1c307cfc3d9a05fec62c00a7264f320c9962a67a543e3ce0d8ff"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:61d0a6ceed8f08c75a395bc28cb648a81cf8dee75ba4650093ad1a24a51c8724"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ad280bbd409bf598683dda82232f5215cfc5f2b1bf0854e409b4d0c44a113b1d"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:76eddaf7fef1d0994e3d536ad48aa75034663d3a07f6f7e3e601105ae73aeff6"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:52e239cd66c4158e412318fbe028cd94b0ef21b0707f56dcb4bdc250ee58fd40"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:08bf9d5eabba160dd4f6ad247cf12f229cc19d2458511cab2eb9647f42fa6795"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:1b2cf018168cad87580e67bdde38ff5e51511112f1ce6ce9a8336871f465c19a"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:14f64d1ac6942ff089fc7e926440f7a5ced062e2ed0949d7d2d680dc5c00e2d4"},
+    {file = "psycopg_binary-3.2.9-cp312-cp312-win_amd64.whl", hash = "sha256:7a838852e5afb6b4126f93eb409516a8c02a49b788f4df8b6469a40c2157fa21"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:98bbe35b5ad24a782c7bf267596638d78aa0e87abc7837bdac5b2a2ab954179e"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:72691a1615ebb42da8b636c5ca9f2b71f266be9e172f66209a361c175b7842c5"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:25ab464bfba8c401f5536d5aa95f0ca1dd8257b5202eede04019b4415f491351"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0e8aeefebe752f46e3c4b769e53f1d4ad71208fe1150975ef7662c22cca80fab"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b7e4e4dd177a8665c9ce86bc9caae2ab3aa9360b7ce7ec01827ea1baea9ff748"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7fc2915949e5c1ea27a851f7a472a7da7d0a40d679f0a31e42f1022f3c562e87"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:a1fa38a4687b14f517f049477178093c39c2a10fdcced21116f47c017516498f"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:5be8292d07a3ab828dc95b5ee6b69ca0a5b2e579a577b39671f4f5b47116dfd2"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:778588ca9897b6c6bab39b0d3034efff4c5438f5e3bd52fda3914175498202f9"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:f0d5b3af045a187aedbd7ed5fc513bd933a97aaff78e61c3745b330792c4345b"},
+    {file = "psycopg_binary-3.2.9-cp313-cp313-win_amd64.whl", hash = "sha256:2290bc146a1b6a9730350f695e8b670e1d1feb8446597bed0bbe7c3c30e0abcb"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-macosx_10_9_x86_64.whl", hash = "sha256:4df22ec17390ec5ccb38d211fb251d138d37a43344492858cea24de8efa15003"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:eac3a6e926421e976c1c2653624e1294f162dc67ac55f9addbe8f7b8d08ce603"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:cf789be42aea5752ee396d58de0538d5fcb76795c85fb03ab23620293fb81b6f"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e0f05b9dafa5670a7503abc715af081dbbb176a8e6770de77bccaeb9024206c5"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b2d7a6646d41228e9049978be1f3f838b557a1bde500b919906d54c4390f5086"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-musllinux_1_2_aarch64.whl", hash = "sha256:a4d76e28df27ce25dc19583407f5c6c6c2ba33b443329331ab29b6ef94c8736d"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-musllinux_1_2_i686.whl", hash = "sha256:418f52b77b715b42e8ec43ee61ca74abc6765a20db11e8576e7f6586488a266f"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-musllinux_1_2_ppc64le.whl", hash = "sha256:1f1736d5b21f69feefeef8a75e8d3bf1f0a1e17c165a7488c3111af9d6936e91"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-musllinux_1_2_x86_64.whl", hash = "sha256:5918c0fab50df764812f3ca287f0d716c5c10bedde93d4da2cefc9d40d03f3aa"},
+    {file = "psycopg_binary-3.2.9-cp38-cp38-win_amd64.whl", hash = "sha256:7b617b81f08ad8def5edd110de44fd6d326f969240cc940c6f6b3ef21fe9c59f"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:587a3f19954d687a14e0c8202628844db692dbf00bba0e6d006659bf1ca91cbe"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:791759138380df21d356ff991265fde7fe5997b0c924a502847a9f9141e68786"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:95315b8c8ddfa2fdcb7fe3ddea8a595c1364524f512160c604e3be368be9dd07"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:18ac08475c9b971237fcc395b0a6ee4e8580bb5cf6247bc9b8461644bef5d9f4"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ac2c04b6345e215e65ca6aef5c05cc689a960b16674eaa1f90a8f86dfaee8c04"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4c1ab25e3134774f1e476d4bb9050cdec25f10802e63e92153906ae934578734"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-musllinux_1_2_aarch64.whl", hash = "sha256:4bfec4a73e8447d8fe8854886ffa78df2b1c279a7592241c2eb393d4499a17e2"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-musllinux_1_2_i686.whl", hash = "sha256:166acc57af5d2ff0c0c342aed02e69a0cd5ff216cae8820c1059a6f3b7cf5f78"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-musllinux_1_2_ppc64le.whl", hash = "sha256:413f9e46259fe26d99461af8e1a2b4795a4e27cc8ac6f7919ec19bcee8945074"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-musllinux_1_2_x86_64.whl", hash = "sha256:354dea21137a316b6868ee41c2ae7cce001e104760cf4eab3ec85627aed9b6cd"},
+    {file = "psycopg_binary-3.2.9-cp39-cp39-win_amd64.whl", hash = "sha256:24ddb03c1ccfe12d000d950c9aba93a7297993c4e3905d9f2c9795bb0764d523"},
+]
+
 [[package]]
 name = "psycopg2-binary"
 version = "2.9.10"
@@ -2058,6 +2129,19 @@ files = [
 [package.dependencies]
 typing-extensions = ">=4.12.0"
 
+[[package]]
+name = "tzdata"
+version = "2025.2"
+description = "Provider of IANA time zone data"
+optional = false
+python-versions = ">=2"
+groups = ["main"]
+markers = "sys_platform == \"win32\""
+files = [
+    {file = "tzdata-2025.2-py2.py3-none-any.whl", hash = "sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8"},
+    {file = "tzdata-2025.2.tar.gz", hash = "sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9"},
+]
+
 [[package]]
 name = "uvicorn"
 version = "0.34.2"
@@ -2422,4 +2506,4 @@ propcache = ">=0.2.1"
 [metadata]
 lock-version = "2.1"
 python-versions = ">=3.12, <4.0"
-content-hash = "1a4b44be5334de3cf5ccb632b3ee35de55dcd2bb956dd4e50cf0c7fbc9a332c2"
+content-hash = "e2b5f6a13f7dd02409488445963fd2d82326abfd1f9b8dea1fa14c1dedd12944"
diff --git a/pyproject.toml b/pyproject.toml
index 94f2d57..ceb76c3 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -16,9 +16,11 @@ dependencies = [
     "debugpy (>=1.8.14,<2.0.0)",
     "asyncpg (>=0.30.0,<0.31.0)",
     "pyjwt (>=2.10.1,<3.0.0)",
-    "passlib[bcrypt] (>=1.7.4,<2.0.0)",
     "alembic (>=1.16.1,<2.0.0)",
     "psycopg2-binary (>=2.9.10,<3.0.0)",
+    "psycopg[binary] (>=3.0.0)",
+    "bcrypt (==4.0.1)",
+    "passlib[bcrypt] (>=1.7.4)",
 ]
 
 
